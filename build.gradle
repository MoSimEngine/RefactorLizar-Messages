plugins {
  id "com.google.protobuf" version "0.8.17"
  // id "com.eriwen.gradle.js" version "2.14.1"
  id "java"
  id 'com.github.jlouns.cpe' version '0.5.0'
}
project.ext.set('protobufVersion', '3.16.0')
project.ext.set('protocVersion', project.protobufVersion)

repositories {
  mavenCentral()
  jcenter()
  mavenLocal()
}

dependencies {
  implementation 'com.google.protobuf:protobuf-java:+'
  implementation 'io.grpc:grpc-stub:+'
  implementation 'io.grpc:grpc-protobuf:+'
  if (JavaVersion.current().isJava9Compatible()) {
    // Workaround for @javax.annotation.Generated
    // see: https://github.com/grpc/grpc-java/issues/3633
    implementation 'javax.annotation:javax.annotation-api:+'
  }
}
def isWindows = System.getProperty('os.name').toLowerCase().contains('windows')
protobuf {
  protoc {
    if (osdetector.os == 'osx') {
      // Required for arm64 support on MacOS
      artifact = "com.google.protobuf:protoc:${protocVersion}:osx-x86_64"
    } else {
      artifact = "com.google.protobuf:protoc:${protocVersion}"
    }
  }
  plugins {
    grpc {
      path = file(
        './node_modules/.bin/grpc_tools_node_protoc_plugin' + (isWindows ? '.cmd' : '')
      )
    }
    ts {
      path = file(
        './node_modules/.bin/protoc-gen-ts' + (isWindows ? '.cmd' : '')
      )
    }
  }
  generateProtoTasks {
    generateProto.finalizedBy copyGeneratedProto
    generateProto.finalizedBy copyGeneratedProtoJava
    all().each { task ->
      task.plugins {
        grpc {
          outputSubDir = 'js'
          option 'grpc_js'
        }
        ts {
          option 'service=grpc-node,mode=grpc-js'
        }
      }
      task.builtins {
        java {}
        js {
          option 'import_style=commonjs'
        }
      }
      task.dependsOn npmInstall
    }
  }
}

task copyGeneratedProto(type: Copy) {
  from "$protobuf.generatedFilesBaseDir/main/ts", "$protobuf.generatedFilesBaseDir/main/js"
  into 'proto/ts'
}
task copyGeneratedProtoJava(type: Copy) {
  from "$protobuf.generatedFilesBaseDir/main/java/"
  into 'proto/java'
}

task npmInstall(type: CrossPlatformExec) {
  description 'Installs node dependencies'
  inputs.file('package-lock.json').withPathSensitivity(PathSensitivity.RELATIVE)
  outputs.dir('node_modules')
  outputs.cacheIf { true }
  commandLine 'npm', 'install'
}